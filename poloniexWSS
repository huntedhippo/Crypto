### This creates a connection to the new poloniex api  wss://api2.poloniex.com
### There is currently no documentation for this but all of the javascript to
### access it is directly readable from the poloniex webpage so I don't think they
### will have a problem with me sharing a python version here.

### Note this is my first python script and first publish to github so all
### suggestions/improvements welcome of course.

### The new poloniex API works on Websockets, I adapted some code I found for
### connecting to Bitfinex.  You can send commands in json format.  I have identified
### two types of commands.
### Commands:
###     subscribe: this allows subscription to a channel and from then on receives
###                 all pushes from the websocket server for that channel
###     private: this allows actions to be performed on your account. I don't know how
###                 to authenticate from python at the moment so can't use this function.
### There are several channels which can be subscribed to:
### Channels:
###     1000: USER, this requires login authentication which I don't know how to do
###     1001: TROLLBOX, currently disabled
###     1002: TICKER, returns ticker each time a trade is made
###     1003: FOOTER, returns server time, the users online and total 24 hour volume for each of the primary currency markets
###             approximately once every 20 seconds.
###     1010: HEARTBEAT, this channel does not need subscribing to but will message to
###             show connection is alive approximately once per second.
###     PCU_SCU: MARKET, returns trades and orders in realtime for the currency pair channel
###                 in format Primary CUrrency, Secondary CUrrency "PCU_SCU"

### Outputs:
### ON SUBSCRIPTION: A JSON list will be returned - [channelName, 1]
### ON UNSUBCRIPTION: A JSON list will be returned - [channelName, 0]
### ON MESSAGE: A JSON list will be returned - [channelName, ID, results], the ID is for a feed of actions to
###             allow checking that all have been received e.g. MARKET. For channels 1002 and 1003 which are
###             a state (point in time information), there is no ID given.

### Types will be returned for the MARKET subscriptions
### Types:
###
### Results:
### The result returned for channels 1002 and 1003 and PCU_SCU will be a JSON list with the following variables
###     1002: [currencyID, last, lowestAsk, highestBid, percentChange, baseVolume, quoteVolume, isFrozen, high24hr, low24hr]
###         currencyID and isFrozen are integers, all others are unicode.
###     1003: [u'yyyy-mm-dd hh:mm', usersOnline , Dictionary {primaryCurrencySymbol:24hourVolume}
###     PCU_SCU: List of lists
###         either
###             order: ["o", bidask, rate, amount]
###             trade: ["t", tradeID, buysell, rate, amount, date]
### bidask 1:bid 0:ask
### buysell 1:buy 0:sell

import json

from websocket import create_connection
ws = create_connection("wss://api2.poloniex.com")

### The USER channel requires to be logged in
### Not sure how to do this but works on webpage
# ws.send(json.dumps({
#     "command": "subscribe",
#     "channel": "1000"
#     "userID": ""
# }))

### TROLLBOX Channel is 1001
### 16/06/2017 This is currently disabled
# ws.send(json.dumps({
#     "command": "subscribe",
#     "channel": "1001"
# }))

# TICKER Channel is 1002
# ws.send(json.dumps({
#     "command": "subscribe",
#     "channel": "1002"
# }))

# ws.send(json.dumps({
#     "command": "subscribe",
#     "channel": "1003"
# }))

# ws.send(json.dumps({
#     "command": "subscribe",
#     "channel": "USDT_BTC"
# }))
#
ws.send(json.dumps({
    "command": "subscribe",
    "channel": "BTC_ETH"
}))


while True:
    result = ws.recv()
    result = json.loads(result)
    print ("Received '%s'" % result)

ws.close()
